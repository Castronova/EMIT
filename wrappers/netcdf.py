
import stdlib
import netCDF4
import wrappers
from wrappers import base
from utilities import geometry
from dateutil import parser
import datetime
# http://www.hydro.washington.edu/~jhamman/hydro-logic/blog/2013/10/12/plot-netcdf-data/

class Wrapper(base.BaseWrapper):
    """
    Wrapper for NetCDF data types.  Requires user specified inputs that cannot be extracted from NetCDF files in
    a generalized manner:

    tdim -> time variable name
    tunit -> time unit name (datetime.timedelta hours, minutes, seconds, days, etc...)
    starttime -> start time
    xdim -> x location variable name
    ydim -> y location variable name

    """


    def __init__(self, args):
        super(Wrapper, self).__init__(self)

        handle = netCDF4.Dataset(args['ncpath'], 'r')

        variables = handle.variables.keys()

        tdim = args['tdim']
        xdim = args['xdim']
        ydim = args['ydim']
        tunit = {args['tunit']: 1}
        st = parser.parse(args['starttime'])

        # make sure the variables provided exist in the nc file
        assert tdim in variables, 'time variable name not specified.  Cannot continue'
        assert xdim in variables, 'x dimension variable name not specified.  Cannot continue'
        assert ydim in variables, 'y dimension variable name not specified.  Cannot continue'



        # get data for these variables
        timesteps = handle.variables[tdim][:]
        times = []
        for ts in timesteps:
            # update the time unit value
            tunit[args['tunit']] = ts

            # unpack the tunit dictionary to create a timedelta object
            dt = datetime.timedelta(**tunit)

            times.append(st + dt)

        variables.remove(tdim)

        xcoords = handle.variables[xdim][:]
        variables.remove(xdim)

        ycoords = handle.variables[ydim][:]
        variables.remove(ydim)



        # loop through the remaining variables and expose them as outputs
        for var in variables:

            # create a unit
            unit = stdlib.Unit()
            unit.UnitName(handle.variables[var].units)

            # create a variable
            variable = stdlib.Variable()
            variable.VariableNameCV(handle.variables[var].name)

            # create geometries
            endidx = min(len(xcoords), len(ycoords)) # in case number of x and y coords does not match
            geoms = geometry.build_point_geometries(xcoords[:endidx], ycoords[:endidx])

            # create exchange item
            oei = stdlib.ExchangeItem(name=variable.VariableNameCV(),
                                desc = 'Autogenerated variable parsed from %s'%args['ncpath'],
                                geometry = geoms ,
                                unit = unit,
                                variable = variable,
                                type = stdlib.ExchangeItemType.OUTPUT)

            # set data
            oei.setValues2(handle.variables[var][:], times)

            # save the oei
            self.outputs(oei)


        print 'initialize complete'

    def prepare(self):
        self.status(stdlib.Status.READY)

    def type(self):
        return wrappers.Types.NETCDF

    def run(self,inputs):
        self.status(stdlib.Status.FINISHED)

    def finish(self):
        self.status(stdlib.Status.FINISHED)


